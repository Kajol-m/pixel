 users = [ {"id":0, "name":"Hero"}, {"id":1,
 "name":"Dunn"}, {"id":2, "name":"Sue"}, {"id":3,
 "name":"Chi"}, {"id":4, "name":"Thor"}, {"id":5,
 "name":"Clive"}, {"id":6, "name":"Hicks"},
 {"id":7, "name":"Devin"}, {"id":8, "name":"Kate"},
 {"id":9, "name":"Klein"} ]

friendship
 pairs = [(0, 1), (0, 2), (1, 2), (1,
 3), (2, 3), (3, 4), (4, 5), (5, 6), (5, 7), (6,
 8), (7, 8), (8, 9)]

 ’’’Initializethedictwith[]foreachuserid:’’’
 2 friendships={user["id"]:[]foruserinusers}
 3 ’’’Andloopoverthefriendshippairstopopulateit:’’’
 4 fori,j infriendship_pairs:
 5 friendships[i].append(j)
 6 friendships[j].append(i)
 7
 8 defno_of_friends(user):
 9 """Howmanyfriendsdoes_user_have?"""
 10 user_id=user["id"]
 11 friend_ids=friendships[user_id]
 12 returnlen(friend_ids)
 13
 14 total_connections=sum(no_of_friends(user)foruserinusers)
 15 avg_connections=total_connections/len(users)
 16
 17 ’’’Createalist(user_id,number_of_friends).’’’
 18 no_friends_by_id=[(user["id"],no_of_friends(user))foruser
 inusers]
 19 no_friends_by_id.sort(key=lambdaid_and_friends:id_and_friends
 [1],reverse=True)


 def foaf
 ids
 bad(user):
 """foaf is short for "friend of a friend" """
 return [foaf
 id
 for friend
 for foaf
 id in friendships[user["id"]]
 id in friendships[friend
 id]]


 from collections import Counter
 def friends
 of
 user
 friends(user):
 id = user["id"]
 return Counter(foaf
 for friend
 id
 id in friendships[user
 for foaf
 if foaf
 id in friendships[friend
 id != user
 and foaf
 id
 id]
 id]
 id not in friendships[user
 print(friends
 of
 friends(users[3]))
 ’’’Counter(0: 2, 5: 1)”’


-----------------------------------------------------------------

 interests = [(0, "Hadoop"), (0, "Big Data"), (0, "HBase"), (0,
 "Java"), (0, "Spark"), (0, "Storm"), (0, "Cassandra"), (1,
 "NoSQL"), (1, "MongoDB"), (1, "Cassandra"), (1, "HBase"), (1,
 "Postgres"), (2, "Python"), (2, "scikit-learn"), (2, "scipy"),
 (2, "numpy"), (2, "statsmodels"), (2, "pandas"), (3, "R"), (3,
 "Python"), (3, "statistics"), (3, "regression"), (3,
 "probability"), (4, "machine learning"), (4, "regression"),
 (4, "decision trees"), (4, "libsvm"), (5, "Python"), (5, "R"),
 (5, "Java"), (5, "C++"), (5, "Haskell"), (5, "programming
 languages"), (6, "statistics"), (6, "probability"), (6,
 "mathematics"), (6, "theory"), (7, "machine learning"), (7,
 "scikit-learn"), (7, "Mahout"), (7, "neural networks"), (8,
 "neural networks"), (8, "deep learning"), (8, "Big Data"), (8,
 "artificial intelligence"), (9, "Hadoop"), (9, "Java"), (9,
 "MapReduce"), (9, "Big Data") ]

 def data
 scientists
 who
 like(target
 interest):
 """Find the ids of all users who like the
 target interest."""
 return [user
 id
 for user
 if user
 id, user
 interest in interests
 interest == target
 interest]





1 fromcollectionsimportdefaultdict,Counter
 2 ’’’Keys areinterests,valuesarelistsofuser_idswiththat
 interest’’’
 3 user_ids_by_interest=defaultdict(list)
 4 foruser_id,interestininterests:
 5 user_ids_by_interest[interest].append(user_id)
 6
 7 ’’’Keys areuser_ids,valuesarelistsofinterestsforthat
 user_id.’’’
 8 interests_by_user_id=defaultdict(list)
 9 foruser_id,interestininterests:
 10 interests_by_user_id[user_id].append(interest)
 11
 12 defmost_common_interests_with(user):
 13 returnCounter(
 14 interested_user_id
 15 forinterest ininterests_by_user_id[user["id"]]
 16 forinterested_user_idinuser_ids_by_interest[interest
 ]
 17 if interested_user_id!=user["id"]
 18 )


